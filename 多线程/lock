package Demo1;

import java.util.concurrent.locks.ReentrantLock;

/*
    1.显式定义同步锁在实现同步。同步锁使用lock充当
    JUC.locks Lock接口是控制多个线程对共享资源进行访问的工具。
    2.锁提供了对共享资源的独占访问，每次只有一线程对Lock对象加锁，
    线程开始访问共享资源之前应该先获得Lock对象。
    3.ReentrantLock(可重入锁)类实现了Lock，拥有与synchronized相同的并发性和内存语义
    可以显式加锁、释放锁
    synchronized和lock的区别：
        1.lock是显式锁（手动开启和关闭锁），synchronized是隐式锁，出了作用域自动释放
        2.lock只有代码锁，synchronized有代码块锁和方法锁
        3.使用lock锁，JVM花费较少的时间调度线程，性能更好，有更好的扩展性
        4.优先使用顺序：lock>同步代码块（已经进入方法体，分配相应资源）>同步方法

 */
//测试lock锁
public class Lock {
    public static void main(String[] args) {
        TestLock testLock2 = new TestLock();

        new Thread(testLock2,"1").start();
        new Thread(testLock2,"2").start();
        new Thread(testLock2,"3").start();

    }

}
class TestLock implements Runnable{
    int ticketnum=10;
    //定义lock锁
    private ReentrantLock lock=new ReentrantLock();
    @Override
    public void run() {
        while (true){

            try {
                lock.lock();//加锁
                if(ticketnum>0){
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println(Thread.currentThread().getName()+"get ticket"+ticketnum--);
                }else{
                    break;
                }

            }finally {
                lock.unlock();//解锁
            }

        }

    }
}
