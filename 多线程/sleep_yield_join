import java.text.SimpleDateFormat;
import java.util.Date;

//停止线程：
//1.建议线程正常停止->利用次数，不建议死循环
//2.建议使用一个标志位进行终止变量，当flag=false，则终止线程运行。
class Test implements Runnable{
    //1.设置标志位
    private boolean flag=true;
    @Override
    public void run() {
        int i=0;
        while(flag){
            System.out.println("run....Thread"+i++);
        }
    }
    //2.设置一个公开的方法停止线程，转换标志位
    public void stop(){
        flag=false;
    }

    public static void main(String[] args) {
        Test t=new Test();
        new Thread(t).start();
        for (int i = 0; i < 1000; i++) {
            System.out.println("main"+i);
            if(i==900){
                t.stop();
                System.out.println("end here");
            }
        }

    }
}
//线程休眠
/*
    sleep指定当前线程阻塞的毫秒数；
    sleep存在异常InterruptedException;
    sleep时间达到后线程进入就绪状态；
    sleep可以模拟网络延时，倒计时
    每个对象都有一个锁，sleep不会释放锁；
 */
class TestSleep implements Runnable{
    private int ticketNum=10;
    @Override
    public void run() {
        while(true){
            if(ticketNum<=0) break;
//            模拟网络延时
            try {
                Thread.sleep(300);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()
                    +"get the ticket "+ticketNum--);
        }
    }

    public static void main(String[] args) {
        TestThread tt=new TestThread();

        new Thread(tt,"1").start();
        new Thread(tt,"2").start();
        new Thread(tt,"3").start();
    }

}
    //模拟倒计时
class TenSleep{
    void tenDown() throws InterruptedException {
        int num=10;
        while (true) {
            Thread.sleep(1000);
            System.out.println(num--);
            if(num<=0){
                break;
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        new TenSleep().tenDown();
        //打印当前系统时间
        Date startTime=new Date(System.currentTimeMillis());//获取当前时间
        while(true){
            Thread.sleep(1000);
            System.out.println(new SimpleDateFormat("HH:mm:ss").format(startTime));
            startTime=new Date(System.currentTimeMillis());
        }
    }
}
//线程礼让：让当前正在执行的线程暂停，但不阻塞，可以将线程从运行状态转为就绪状态
//         让cpu重新调度，但礼让不一定成功，看cpu的具体执行
class TestYield{
    public static void main(String[] args) {
        MyYield my=new MyYield();

        new Thread(my,"a").start();
        new Thread(my,"b").start();
    }
}
class MyYield implements Runnable{
    public void run(){
        System.out.println(Thread.currentThread().getName()+" start now");
        Thread.yield();
        System.out.println(Thread.currentThread().getName()+"end here");
    }
}
//合并线程：待此线程执行完成之后，再执行其他的线程，其他线程阻塞
class TestJoin implements Runnable{
    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            System.out.println("thread prior");
        }
    }

    public static void main(String[] args) throws InterruptedException {
        //启动线程
        TestJoin tj=new TestJoin();
        Thread t=new Thread(tj);
        t.start();
        //主线程
        for (int i = 0; i < 500; i++) {
            if(i==200){
                t.join();//强行执行
            }
            System.out.println("main"+i);
        }
    }
}
