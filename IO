import java.io.*;
import java.util.*;


public class Demo0 {
    //基本字节流和字符流
    public void test1() throws IOException {
    /*  基本字节流和字符流
>>>>>字节流的抽象基类
    OutputStream
    InputStream
    1.如何打开待写入的文件
    FileOutputStream：文件输出流用于将数据写入file
    FileOutputStream(File file)
    FileOutputStream(String name)
    //创建文件输出流以指定的名称写入文件
    FileOutputStream fos=new FileOutputStream("example0",true);
    /done 3 things
        1.调用系统功能创建文件；
        2.创建字节输出流对象
        3.让字节流输出对象指向创建好的文件

    2.如何在文件中写数据：
    void write(byte[] b)
    void write(byte[] b,int off,int len)
    //off是偏移量，len为待写入的字节数组中的长度

    3.字节输入流如何换行：
      写完数据后，加换行符
        windows:\r\n;
        linux:\n
        Mac:\r
        fos.write("\r\n".getbyte());
    4.字节流追加数据：
        public FileOutputStream(String name,boolean append)throws FileNotFoundException
        //创建文件输出流以指定的名称写入文件，第二个参数为true，一直在文件尾部进行增加。
    5.字节流写数据加异常处理
        try {
        FileOutputStream fos=new FileOutputStream("example0",true);
        byte[] bys="abcde".getBytes();
        fos.write(bys);
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        上述代码中如果出现异常并不会释放资源
        使用finally：在异常处理时提供finally块来执行所有清楚操作，比如IO中的释放资源
        被finally控制的语句一定会执行，除非jvm退出
        try{
            可能出现异常的代码
        }catch (异常类名 变量名){
            异常处理的代码
        }finally {
            执行所有清除工作
        }
        修改过的代码：
        try {
        fos=new FileOutputStream("z:\\mytest");
        byte[] bys="abcde".getBytes();
        fos.write(bys);
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        此时假如fos想要保存的地址为空，则会在finally想要结束时报出空指针异常
        finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    6.字节流读数据（一次读一个数据）
        1>创建字节输入流对象
        2>调用字节输入流对象的读数据方法
        3>释放资源
        int by=fis.read();
        //读一个字节如果到达文件末尾就返回-1
        int read(byte[] b);
        //从输入流读取最多b.length个字节的数据到字节数组
        byte[] bys=new byte[5];
        int len=fis.read(bys)
        sout(new String(bys,0,len))
    7.复制文本、图像文件
        数据源=》InputStream读
        目的地=》OutputStream写
        1>根据数据源创建字节输入流对象
        2>根据目的地创建字节输出流对象
        3>读写数据，复制文本文件（一次读取一个字节/字节数组，一次写入一个字节/字节数组）
        4>释放资源
    8.字节缓冲流
        BufferedInputStream
        BufferedOutputStream
       构造方法
        BufferedOutputStream(OutputStream out)
        BufferedInputStream(OutInStream in)
>>>>>>>>字符流：
        GBK：2个字节
        UTF-8：3个字节
        字符流=字节流+编码表
        "中国".getBytes("GBK")!="中国".getBytes("UTF-8")
        在字节流复制字符流文件时，会自动根据编码表进行字节拼接
        编码：
        byte[] bys="ABS".getBytes();
        byte[] bys="ABS".getBytes(String charsetName);//使用自定义字符集进行编码
        解码：
        String(byte[] bytes)
        String(byte[] bytes,String charsetName)//使用自定义字符集进行解码
    字符流的抽象基类：
        Reader
        Writer
        InputStreamReader
        OutputStreamWriter
        //字符流有缓冲，在每次写入时需要进行刷新 osw.flush(),但close会在关闭前先刷新




 */
        //写
//        FileOutputStream(File file)
//        File file=new File("example0");
//        FileOutputStream fos=new FileOutputStream(file);
//        write(byte[] b)
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream("example0");
            byte[] bys = "hello\r\nworld\r\n".getBytes();
            fos.write(bys);
//        write(byte[] b, int off, int len)
//        fos.write(bys,1,3);
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        //读
        //1>int整型
        FileInputStream fis = new FileInputStream("example0");
//        int by;
//        while((by=fis.read())!=-1){
//            System.out.print((char)by);
//        }
        //2>byte数组
        byte[] bys = new byte[5];
        //第一次读取
//        int len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys));//hello
//        //第二次读取
//        len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys));
        //output：
//        5
//        hello
//        5
//
//        wor
//        此时读取的字节数组应该为[/n,/r,w,o,r]，读的时候自动读取，显示时也会自动转换
//        //第三次读取
//        len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys));
        //output:
//        5
//        hello
//        5
//
//        wor
//        4
//        ld
//        r
//        （这里有个换行
        //此时读取的字节数组应该为[l,d,/r,/n,r],最后一个r是上次数组所读取的
        //4 means：不是默认输出数组的长度，而是实际读取到的数组长度
        //所以在读取的时候应该加上偏移量
        //System.out.println(new String(bys,0,len));
//        len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys,0,len));//hello
//
//        len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys,0,len));
//        len=fis.read(bys);
//        System.out.println(len);//5
//        System.out.println(new String(bys,0,len));
        //循环改进代码
//        byte[] bytes=new byte[1024];
//        int len;
//        while((len=fis.read(bytes))!=-1){
//            System.out.println(new String(bytes,0,len));
//        }


        //复制字节码文件
        FileInputStream fis1 = new FileInputStream("example0");
        FileOutputStream fos1 = new FileOutputStream("example1");
        int by1;
        while ((by1 = fis1.read()) != -1) {
            fos1.write(by1);
        }
        fis1.close();
        fos1.close();
        //复制图像
//        int len;
//        FileInputStream fis2=new FileInputStream("C:\\Users\\yangyangwang\\Pictures\\avatar_1578056612.jfif");
//        FileOutputStream fos2=new FileOutputStream("C:\\Users\\yangyangwang\\Pictures\\cat.jpg");
//        byte[] bytes1=new byte[1024];
//        while((len=fis2.read(bytes1))!=-1){
//            fos2.write(bytes1,0,len);
//        }
//        fis2.close();
//        fos2.close();
        //缓存机制
//        FileOutputStream fileOutputStream=new FileOutputStream("example");
//        BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(fileOutputStream);
        //写数据
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream("example1"));
        bufferedOutputStream.write("and".getBytes());
        bufferedOutputStream.close();
        //读数据
        BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream("example1"));
        int len;
        while ((len = bufferedInputStream.read(bys)) != -1) {
            System.out.print(new String(bys, 0, len));
        }
        bufferedInputStream.close();
        //字符流
//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("example"));
//        osw.write("good enough");
//        osw.close();

    }

    //通过集合向文件里写
    public void test2() throws IOException {

//        List<Student> lst=new ArrayList<>();
//        lst.add(new Student(15,"gary"));
//        lst.add(new Student(30,"kristen"));
//        BufferedWriter bos=new BufferedWriter(new FileWriter("student.txt"));
//        for(Student i:lst){
//            StringBuffer temp=new StringBuffer();
//            temp.append(i.age).append(",").append(i.name);
//            bos.write(temp.toString());
//            bos.newLine();
//            bos.flush();
//        }
//        bos.close();
        //从文件中读取，写进集合中
//        List<Student> lst=new ArrayList<>();
//        BufferedReader br=new BufferedReader(new FileReader("student.txt"));
//        char[ ] chars=new char[3];
//        String line;
//        while((line=br.readLine())!=null){
//            String[] temp=line.split(",");
//            Student st=new Student();
//            st.age=Integer.parseInt(temp[0]);
//            st.name=temp[1];
//            lst.add(st);
//        }
//        br.close();
//        for(Student i:lst){
//            System.out.println(i);
//        }
//        new Comparator可以构造比较方式
        TreeSet<Student> ts = new TreeSet<>(new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                if (o1.age >= o2.age) return 1;
                else if (o1.name.compareTo(o2.name) >= 0) return 1;
                else return 0;
            }
        });
        for (int i = 0; i < 3; i++) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("录入" + (i + 1) + "学生信息");
            System.out.println("年龄");
            int age = scanner.nextInt();
            System.out.println("名字");
            String name = scanner.next();

            ts.add(new Student(age, name));

        }
        BufferedWriter bos = new BufferedWriter(new FileWriter("studentinfo"));
        for (Student i : ts) {
            StringBuffer sb = new StringBuffer();
            sb.append(i.age).append(",").append(i.name);
            bos.write(sb.toString());
            bos.newLine();
            bos.flush();
        }
        bos.close();
    }

    //单级文件的复制
    public void test3() throws IOException {
        /*

         */
        //创建数据源目录File对象
        File srcFolder = new File("C:\\Users\\yangyangwang\\Pictures");
        //获取数据源目录的名称itcast
        String srcFolderName = srcFolder.getName();
        //创建目的地目录对象：模块名字+itcast
        File destFolder = new File("C:\\Users\\yangyangwang\\Desktop", srcFolderName);
        //判断目的地目录的合法性
        if (!destFolder.exists()) {
            destFolder.mkdir();
        }
        //得到源数据的所有文件数组
        File[] listFiles = srcFolder.listFiles();
        //依次遍历，
        for (File srcFile : listFiles) {
            String srcFilename = srcFile.getName();
            //目的地文件file对象
            File desFile = new File(destFolder, srcFilename);
            //复制文件
            copy(srcFile, desFile);


        }
    }

    //复制多级文件夹
    public void test4() throws IOException {

        File srcFile = new File("C:\\Users\\yangyangwang\\Desktop\\he");
        File destFile = new File(srcFile, "C:\\Users\\yangyangwang\\Desktop");
        copyFolder(srcFile, destFile);
    }

    //异常处理
    public void method() throws IOException{
        //jdk9以后 要在函数层级抛出异常
//        FileReader fr0 = new FileReader("fr.txt");
//        FileWriter fw0 = new FileWriter("fw.txt");
//        try (fr0;fw0) {
//            char[] chs = new char[1024];
//            int len;
//            while ((len = fr0.read(chs)) != -1) {
//                fw0.write(chs, 0, len);
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
        //jdk7以后
        try (FileReader fr = new FileReader("fr.txt");
             FileWriter fw = new FileWriter("fw.txt");) {
            char[] chs = new char[1024];
            int len;
            while ((len = fr.read(chs)) != -1) {
                fw.write(chs, 0, len);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        //try,catch,finally
        FileReader fr1=null;
        FileWriter fw1=null;
        try {
            fr1 = new FileReader("fr.txt");
            fw1 = new FileWriter("fw.txt");
            char[] chars = new char[1024];
            int len;
            while ((len = fr1.read(chars)) != -1) {
                fw1.write(chars, 0, len);
            }
        }catch (IOException e){
            e.printStackTrace();
        }finally {

            try {
                fr1.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                fw1.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    //标准输入输出流
    public void test5() throws IOException {
       /*
    public static final InputStream in:标准输入流，一般指的是键盘输入
    public static final PrintStream out:标准输出流，一般指的是控制台输出

     */
//>>>>>>>>>>>>>input
//        InputStream is = System.in;
        //InputStream表示是输入字节流的一个子类，用多态指定生成了一个字节输入流的子类
//        int by;
//        while((by=is.read())!=-1){
//            System.out.println((char)by);
//        }
        //转换为字符流，用转换流
//        InputStreamReader isr=new InputStreamReader(is);
        //使用字符流一次读取一行数据：需要使用字符缓冲流
//        BufferedReader br=new BufferedReader(isr);
        //可以简化
//        BufferedReader br0=new BufferedReader(new InputStreamReader(System.in));
//        String line=br0.readLine();
//        System.out.println("your just entered a String:"+line);
//        int i=Integer.parseInt(br0.readLine());
//        System.out.println("your just entered an int :"+i);
        //实现键盘录入复杂，可以使用Scanner
//        Scanner sc=new Scanner(System.in);
// >>>>>>>>>outprint
        PrintStream ps = System.out;
//        System out本质就是一个字节输出流
        ps.println("msdkcdk");


    }
    //打印流
    public void test6()throws IOException{
/*
    字节打印流：PrintStream
    字符打印流：PrintWriter
 */
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//        PrintStream ps=new PrintStream("ps.txt");
//        //写数据
//        //字节流的特有方法
////        ps.write(97);//a：转码
//        //使用特有方法
//        ps.print(97);//97:输入什么读出什么
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //public PrintStream(String fileName)
//        PrintWriter pw=new PrintWriter("ps.txt");
//        pw.write("hello");
//        pw.flush();//字符流总是要刷新缓冲区
        //更新构造方法，实现自动刷新
//        public PrintStream(OutputStream out,boolean autoFlush)创建一个新的打印流
//        autoFlush - 一个布尔值 如果为true，则每当写入一个字节数组时，输出缓冲区将被刷新，
//        其中一个println方法被调用，或换行符或字节（ '\n' ）被写入
        PrintWriter pw=new PrintWriter(new FileWriter("ps.tct"),true);
        pw.println("hello");
        pw.close();

    }
    //复制文件使用打印流
    public void test7() throws IOException {
        //根据数据源创建字符输入流
        BufferedReader bf=new BufferedReader(new FileReader("ps.txt"));
        //根据目的地创建输出流对象
        PrintWriter pw=new PrintWriter(new FileWriter("new"),true);
        //读写数据
        String line;
        while((line=bf.readLine())!=null){
            pw.println(line);
        }
        bf.close();
        pw.close();
    }
    //对象序列化：将对象保存在磁盘中，或者在网络中传输对象
    //使用一个字节序列表示一个对象，包括对象的类型、对象的数据以及对象中存储的属性
    //反之，字节序列可以从文件中读取回来，重构对象，对他进行反序列化
    public void test8() throws IOException, ClassNotFoundException {
        /*
        ObjectOutputStream将Java对象的原始数据类型和图形写入OutputStream。
         可以使用ObjectInputStream读取（重构）对象。
          可以通过使用流的文件来实现对象的持久存储。
          如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象
         */
        //>>>>>>>>>序列化

        //writeObject(Object obj) 将指定的对象写入ObjectOutputStream
        ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream("myoos"));
        Student st=new Student(15,"lee");
        //需要让此类（Student）实现接口Serializable
        // Serializable只是标记，不需要重写方法
        oos.writeObject(st);
        oos.close();
        //>>>>>>>>>反序列化
        ObjectInputStream ois=new ObjectInputStream(new FileInputStream("myoos"));
        Object obj = ois.readObject();
        Student s=(Student) obj;
        System.out.println(s);
        ois.close();
        /*
            如果类文件修改，储存在文件中的ois读取会出现错误
            (
                当序列化运行时检测到类中的以下问题之一时抛出。
                类的串行版本与从流中读取的类描述符的类型不匹配
                //序列化运行时与每个可序列化的类关联一个版本号，称为serialVersionUID，它在反序列化过程中使用，
                //以验证序列化对象的发送者和接收者是否加载了与序列化兼容的对象的类。
                //如果接收者已经为具有与对应发件人类别不同的serialVersionUID的对象加载了一个类，
                //则反序列化将导致一个InvalidClassException 。
                该类包含未知的数据类型
                该类没有可访问的无参数构造函数
              )解决办法：
              一个可序列化的类可以通过声明一个名为"serialVersionUID"的字段来
              显式地声明它自己的serialVersionUID，该字段必须是static，final和long类型：
              private static final long serialVersionUID = 42L;
              不想成员被序列化，可以使用transient进行修饰
         */


    }
    //Properties(Map的一个集合类)
    //Properties可以保存到流中或从流中加载
    //没有泛型接口，默认是Object类型
    public void test9(){
//        Properties prop=new Properties();
//        prop.put("001","lee");
//        prop.put("002","dee");
//        prop.put("003","jee");
//        Set<Object> keySet = prop.keySet();
//        for(Object key:keySet){
//            System.out.println(key+" "+prop.get(key));
//        }
        /*
        Properties作为集合的特有方法：
            Object setProperty(String key, String value)
            stringPropertyNames:键的集合
         */
        Properties prop=new Properties();
        prop.setProperty("001","lee");
        prop.setProperty("002","dee");
        prop.setProperty("003","jee");
        System.out.println(prop.getProperty("001"));
        Set<String> key = prop.stringPropertyNames();
        for(String s:key){
            System.out.println(s+prop.getProperty(s));
        }

    }
    //Properties和IO流结合的方法
    public void test10() throws IOException {
        //把集合中的数据保存到文件中
        Properties prop=new Properties();
        prop.setProperty("001","lee");
        prop.setProperty("002","dee");
        prop.setProperty("001","jee");
        FileWriter fw=new FileWriter("fw.txt");
        prop.store(fw,null);
        fw.close();
        //把文件中的信息输入到集合中
        FileReader fr=new FileReader("fw.txt");
        prop.load(fr);
        System.out.println(prop);

    }




    
    //复制文件夹method
    private void copyFolder (File srcFile, File destFile) throws IOException {
        if (srcFile.isDirectory()) {
            String srcFilename = srcFile.getName();
            File newFolder = new File(destFile, srcFilename);
            if (!newFolder.exists()) {
                newFolder.mkdir();
            }
            File[] fileArray = srcFile.listFiles();
            for (File src : fileArray) {
                copyFolder(src, newFolder);
            }

        } else {
            File newFile = new File(destFile, srcFile.getName());
            copy(srcFile, newFile);
        }
    }
    //复制文件method
    private void copy (File srcFile, File desFile) throws IOException {
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFile));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(desFile));
        byte[] bys = new byte[1024];
        int len;
        while ((len = bis.read(bys)) != -1) {
            bos.write(bys, 0, len);
        }
        bis.close();
        bos.close();
    }
    public static void main (String[]args) throws IOException, ClassNotFoundException {
        new Demo0().test10();

    }
}
